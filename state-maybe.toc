
;; state-maybe monad with lazy comp*

(defn reduce-args [[arg & args] s]
  (flat-map (arg s)
            (fn [[result new-s]]
              (or (and (list-empty? args)
                       (maybe (list (list result) new-s)))
                  (flat-map (reduce-args args new-s)
                            (fn [[results final-s]]
                              (maybe (list (cons result results) final-s))))))))

(defn -comp* [mv mvs s]
  (let [x (mv s)]
    (or (and (= nothing (list-empty? mvs))
             (= nothing x)
             (let [[mv & mvs] mvs]
               (-comp* mv mvs s)))
        x)))

(deftype new-sm [invoke-fn]
  Stringable
  (string-list [_] (list "<new-sm >"))

  Function
  (invoke [ev s]
    (invoke-fn s))

  Container
  (map [_ f]
    (new-sm (fn [s]
              (for [[v new-s] (invoke-fn s)]
                (list (f v) new-s)))))
  (wrap [_ v]
    (new-sm (fn [s]
              (maybe (list v s)))))
  (apply* [fv args]
    (new-sm (fn [s]
              (or (for [_ (list-empty? args)
                        [f new-s] (fv s)]
                    (list (f) new-s))
                  (for [[results s] (reduce-args args s)
                        [f s] (fv s)]
                    (list (apply f results) s))))))
  (flat-map [ev f]
    (new-sm (fn [s]
              (flat-map (invoke-fn s)
                        (fn [[v ss]]
                          ((f v) ss))))))

  Composition
  (zero [_] (new-sm (fn [_] nothing)))
  (comp* [mv mvs]
    (new-sm (fn [s]
              (-comp* mv mvs s)))))

(def state-maybe
  (reify
    Function
    (invoke [_ v]
      (new-sm (fn [s]
                (maybe (list v s)))))

    Composition
    (zero [_] (new-sm (fn [_] nothing)))))

(defn lift [f]
  (fn [& args]
    (new-sm (fn [s]
              (maybe (list (apply f args) s))))))

(defn traverse [coll f]
  (apply* (state-maybe list) (map coll f)))

(defn update-state [f]
  (new-sm (fn [s]
            (maybe (list s (f s))))))

(defn get-val
  ([k]
     (new-sm (fn [s]
               (for [v (get s k)]
                 (list v s)))))
  ([k nf]
     (new-sm (fn [s]
               (or (for [v (get s k)]
                     (list v s))
                   (maybe (list nf s)))))))

(defn set-val [k v]
  (new-sm (fn [s]
            (maybe (list nothing (assoc s k v))))))

(defn get-in-val
  ([path]
     (new-sm (fn [s]
               (for [v (get-in s path)]
                 (list v s)))))
  ([path nf]
     (new-sm (fn [s]
               (or (for [v (get-in s path)]
                     (list v s))
                   (maybe (list nf s)))))))

(defn assoc-in-val [path v]
  (new-sm (fn [s]
            (maybe (list v (assoc-in s path v))))))

(defn update-in-val [path f]
  (new-sm (fn [s]
            (for [old-v (get-in s path)]
              (list old-v (update-in s path f))))))

(defn recur-fn [f as s]
  (or (flat-map (f s)
                (fn [[v ss]]
                  (recur-fn f (cons v as) ss)))
      (maybe (list as s))))

(defn recur [mv]
  (new-sm (fn [s]
            (for [[v ss] (mv s)
                  [vs s] (recur-fn (.invoke-fn mv) (list v) ss)]
              (list (reverse vs) s)))))

(defn when [val]
  (new-sm (fn [s]
            (flat-map val
                      (fn [v]
                        (maybe (list v s)))))))

(defn when-not [val]
  (new-sm (fn [s]
            (flat-map (= nothing val)
                      (fn [v]
                        (maybe (list v s)))))))
